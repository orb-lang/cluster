* EZ Loader


  The idea is dead simple, it's a table which pulls all the project names out
of the database, and so we can say =ez.core.set= or =ez.deque.deque= and
just get them.

It ends with a require string, this isn't so hard to do actually. hmm.

The refinement is we need to distinguish in many cases between eg.
=project:mod= (which is =ez.project.mod=) and =project:mod/submod=, which must
be =ez.project.mod.submod=.  Solution: *iff* a field has both a module and
modules related to it, the table it returns is callable as well as indexable,
so =ez.project.mod()= gets =require "project:mod"=.

We also allow =ez.proj()=, giving what we currently call ="proj:proj"= though
we want to change the database a bit to make ="proj"= the unambiguous short
form for this.

EZ being all about quick ergonomics, we offer =ez.project.mod ""= to return
the requisite require string, which I intend to reuse in a linting tool which
can replace EZ calls in code with the properly-spelled requires.


#!lua
local conn = assert(require "bridge" . modules_conn)
#/lua


**** Project ID table

We need all the project names and IDs first, no better time than load time.

#!sql @get_all_project #asLua
SELECT project_id as project, name FROM project;
#/sql

Which we obtain immediately, mapping names to projects:

#!lua
local project = {}

for i, id, name in conn:prepare(get_all_project):cols() do
   project[name] = id
end
#/lua

For the modules, we just need the strings, because we defer actual loading to
require, so we don't break everything in existence.

We'll need to come back to this when we can tombstone modules, since we don't
care to expose the ones which won't load.

#!sql @get_distinct_modules #asLua
SELECT DISTINCT name FROM module
WHERE module.project = :id
GROUP BY name
ORDER BY MAX(module.time) DESC
#/sql


**** EZ

We need a fancy index for this:

#!lua
local EZ = {__meta = {__keys = project}}
#/lua

#!lua
local get_mods = conn:prepare(get_distinct_modules)

local Mod_M = {}

function EZ.__index(tab, name)
   if project[name] then
      local modmap = {name}
      local modules = get_mods :bind(project[name]) :resultset 'i' [1]
      get_mods :clearbind() :reset()
      local modmap = {}
      for i, str in ipairs(modules) do
        -- what we actually do here is kinda fun but not now
        modmap[str] = true
      end

      return setmetatable(modmap, Mod_M)
   end
end
#/lua


*** project(), project.module(), etc

We use the database for names (indeed, we must) but end up building a string
for require.

#!lua
function Mod_M.__call(mod)
   return require (mod[1] .. ":" .. mod[1])
end
#/lua


#!lua
return setmetatable({}, EZ)
#/lua
